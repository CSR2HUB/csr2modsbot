name: Deploy CSR2 MODS STORE Bot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint || echo "Linting step skipped"
    
    - name: Run tests
      run: npm test || echo "Tests skipped"
    
    - name: Check bot syntax
      run: node -c index.js

  build-and-deploy-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/csr2-mods-store-bot:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/csr2-mods-store-bot:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-vps:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd /var/www/csr2-mods-store-bot
          git pull origin main
          npm install --production
          pm2 reload ecosystem.config.js --env production
          pm2 save

  notify:
    needs: [build-and-deploy-docker, deploy-vps]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Telegram
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          üöÄ CSR2 MODS STORE Bot Deployment
          
          üìÅ Repository: ${{ github.repository }}
          üåø Branch: ${{ github.ref_name }}
          üìù Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}
          
          ‚úÖ Status: ${{ job.status }}
          üîó Actions: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      if: github.event_name == 'push'
      with:
        sarif-file: 'security-scan.sarif'
      continue-on-error: true